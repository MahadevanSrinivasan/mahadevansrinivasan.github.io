<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Shy Bulb</title>
    <description>Stream to XBMC Sudoku Sudokids Pickpocket Raspberry Pi
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 04 Nov 2015 00:03:26 -0800</pubDate>
    <lastBuildDate>Wed, 04 Nov 2015 00:03:26 -0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>Design of Antenna Arrays using Windows</title>
        <description>&lt;p&gt;When I was in grad school, I wrote a paper on how to design Antenna Arrays using
Window functions. I uploaded it to &lt;a href=&quot;www.academia.edu&quot;&gt;Academia.edu&lt;/a&gt; and forgot
all about it. Once in a while I get an email from Academia.edu that someone
searched for me. I got intrigued today and did a google search for
&lt;a href=&quot;https://www.google.com/#q=antenna+array+windows&quot;&gt;“Antenna Arrays Windows”&lt;/a&gt; and
was surprised to note that my paper is the second best match :stuck_out_tongue:. Here is my shameless
blog article to get that traffic to come to my site instead. If you prefer a PDF version
of the paper, you can find it &lt;a href=&quot;(/assets/Ant_Report.pdf)&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;abstract&quot;&gt;Abstract&lt;/h4&gt;

&lt;p&gt;The design of uniformly-spaced antenna arrays has a significant similarity to the design of FIR filters in signal processing and is illustrated first. This paper compares the effect of various windows on the shape of the radiation pattern of an antenna array. To illustrate the power of windows, we will design a sector pattern and a cosine pattern using various windows available namely Blackmann, Hanning, Hamming and the customizable Kaiser Window. Comparison is made on the radiation patterns produced whilst using each of the windows using the parameters of the generated pattern namely, beam width and side lobe level. To demonstrate the generality of the window design method, we see that there exists a window which gives an radiation pattern with all the side lobe levels having the same value which gives the same results as the Chebyshev Design Method for Uniformly Spaced arrays. Also, there is a window for Taylor Array Design Method.&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The design of uniformly spaced arrays is extremely similar to the problem of FIR filter design. So, many methods that are used there can be used in antenna array design. One such method is the window based FIR filter design. We already know that the fourier series method used in antenna array design is also there in FIR filter design. We first explain the fourier series method briefly before going into the Window Method.&lt;/p&gt;

&lt;h4 id=&quot;fourier-series-method&quot;&gt;Fourier Series Method&lt;/h4&gt;
&lt;p&gt;Suppose it is desired to design a sector pattern of beamwidth 60&lt;/p&gt;

&lt;p&gt;\begin{equation}
\ f(\theta) = \left\{
\begin{array}{l l}
  1 &amp;amp; \quad 0^\circ \leq  \theta \leq 60 ^\circ \\
  0 &amp;amp; \quad elsewhere
\end{array} \right. \
\end{equation}&lt;/p&gt;

&lt;p&gt;Design of array means finding the current excitations required on the array elements to give the required pattern. Since the currents and the radiation pattern are related through a fourier series, we can find the currents using that relation.&lt;/p&gt;

&lt;p&gt;\begin{equation}SF_A(w) = \sum_{m=-N}^N i_m e^{j2\pi m \frac{d}{\lambda} w}\end{equation}
\begin{equation}SF_A(w) = \sum_{m=1}^N i_m e^{j\pi (2m-1) (\frac{d}{\lambda}) w} + \sum_{m=1}^N i_{-m} e^{j\pi (2m-1) (\frac{d}{\lambda}) w}\end{equation}&lt;/p&gt;

&lt;p&gt;As we know, the Fourier Series expansion of a periodic signal \( x(t) \) results in an infinite number of terms.&lt;/p&gt;

&lt;p&gt;\begin{equation}c_n = \frac{1}{T_0} \int_{-T_0/2}^{T_0/2} x(t)e^{-jn2\pi f_0t} \,dt\end{equation} \begin{equation}x(t) = \sum_{n=-\infty}^{\infty}c_ne^{jn2\pi f_0t}\end{equation}&lt;/p&gt;

&lt;p&gt;But, we can have only finite number of elements in the array. Hence, we truncate. This could be viewed as applying a rectangular window to the actual fourier series expansion. For simplicity, we consider only the odd elements case. It could easily be extended to even elements case.&lt;/p&gt;

&lt;p&gt;\begin{equation}SF_A(w) = \sum_{m=-\infty}^{\infty} i_m w_m e^{j2\pi m \frac{d}{\lambda}w}\end{equation}&lt;/p&gt;

&lt;p&gt;where, \( w_m \) is the window sequence which is defined as follows.&lt;/p&gt;

&lt;p&gt;\begin{equation}
w(m) = \left\{
\begin{array}{l l}
  1 &amp;amp; \quad -N \leq  m \leq N \\
  0 &amp;amp; \quad elsewhere
\end{array} \right.
\end{equation}&lt;/p&gt;

&lt;p&gt;The effect of using the window is seen in the obtained approximate radiation pattern in the form of a main lobe width and side lobe levels. These are the signatures of the rectangular window function. Intuitively, the side lobes could be explained as due to the abrupt truncation of the fourier series coefficients.&lt;/p&gt;

&lt;p&gt;The problem with using this window is that the ratio of the main lobe peak to the side lobe peak is always constant and doesn’t depend upon the number of elements we use. So, in an application where there is a need for a side lobe level which is significantly lesser than the main lobe peak, we cannot use this method to design the array.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/plot1.jpg&quot; alt=&quot;Fourier series method output&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;window-based-design&quot;&gt;Window based design&lt;/h4&gt;
&lt;p&gt;To reduce the side lobe levels in the generated pattern, we could smoothly taper the current distribution obtained from the Fourier Series Method using a properly chosen window. There are several windows available in the literature with each having some advantages over the other. Here, we will study the effect of using the following windows : Hann, Hamming, Blackman, Kaiser. These windows are defined by the following equations.&lt;/p&gt;

&lt;h5 id=&quot;hann&quot;&gt;Hann&lt;/h5&gt;
&lt;p&gt;\begin{equation}
w(n) = \left\{
\begin{array}{l l}
  0.5 - 0.5\cos(2\pi n/N), &amp;amp; \quad 0 \leq  n \leq N \\
  0, &amp;amp; \quad otherwise
\end{array} \right.
\end{equation}&lt;/p&gt;

&lt;h5 id=&quot;hamming&quot;&gt;Hamming&lt;/h5&gt;
&lt;p&gt;\begin{equation}
w(n) = \left\{
\begin{array}{l l}
  0.54 - 0.46\cos(2\pi n/N), &amp;amp; \quad 0 \leq  n \leq N \\
  0, &amp;amp; \quad otherwise
\end{array} \right.
\end{equation}&lt;/p&gt;

&lt;h5 id=&quot;blackman&quot;&gt;Blackman&lt;/h5&gt;
&lt;p&gt;\begin{equation}
w(n) = \left\{
\begin{array}{l l}
  0.42 - 0.5\cos(2\pi n/N) + 0.08\cos(4\pi n/N), &amp;amp; \quad 0 \leq  n \leq N \\
  0, &amp;amp; \quad otherwise
\end{array} \right.
\end{equation}&lt;/p&gt;

&lt;p&gt;Through a proper choice of the shape and the length of the window, we could control the resulting approximate radiation pattern. The windows defined in the above equations are fixed and offer very little in terms of control to the designer. This is where the Kaiser Window comes in. It gives one more parameter (\( \beta \)) to the designer which helps in controlling the shape of the window.&lt;/p&gt;

&lt;p&gt;The compromise between the width of the main lobe and the area under the side lobe can be obtained by having a window function that is concentrated around 0 in frequency domain. This was considered in classic papers by Slepian et al. (1961). Kaiser(1966,1974) came up with a near-optimal window using modified first kind Bessel Function of the zeroth order. It is defined as follows&lt;/p&gt;

&lt;p&gt;\begin{equation}
w(n) = \left\{
\begin{array}{l l}
  \frac{I_0[\beta(1-[(n-\alpha)/\alpha]^2)^{1/2}]}{I_0(\beta)}, &amp;amp; \quad 0 \leq  n \leq N \\
  0, &amp;amp; \quad otherwise
\end{array} \right.
\end{equation}
where \( \alpha = N/2 \) and \( I_0(.) \) is the Modified Bessel Function of zeroth order and first kind.&lt;/p&gt;

&lt;p&gt;In figure 2, we have plotted the window function for various values of \( \beta \) and a fixed value of M. In figure 3, we have plotted the fourier transform of the window functions. Finally, we have plotted the fourier transforms of windows with same \( \beta \) parameter but different N parameter. For a more detailed reference on windows, refer to the paper by Harris[2].&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/plot2.png&quot; alt=&quot;Kaiser Window Spectrum for various values of beta with M = 21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/plot3.png&quot; alt=&quot;Kaiser Window Spectrum for various values of M with beta = 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clearly, the parameter \( \beta \) decides the side-Lobe Level. By keeping \( \beta \) fixed and by increasing N, we could achieve a reduced main lobe width without any effect on the side lobe Level. Kaiser also came up with a pair of formulae that allows the designer to estimate the parameters M and \( \beta \) for the required specification of peak approximate error. Peak Approximate Error as the name implies is the maximum error between the desired and the approximate response. Peak Approximate Error in a way specifies the maximum side lobe level \(A = -20log_{10}(\delta) \). The empirical relation is as follows:
\begin{equation}
\beta = \left\{
\begin{array}{l l}
  0.1102(A-8.7), &amp;amp; \quad A &amp;gt; 50, \\
  0.5842(A - 21)^{0.4} + 0.07886(A-21), &amp;amp; \quad 21 \leq A \leq 50, \\
  0.0, &amp;amp; \quad A &amp;lt; 21.
\end{array} \right.
\end{equation}
Kaiser also determined that to achieve the required values of A and the \( \Delta \omega \) (called the transition width), N must satisfy \( N = \frac{A-8}{2.285\Delta \omega} \)&lt;/p&gt;

&lt;p&gt;Of particular importance are the special windows Chebychev and Taylor. The use of these windows result in a radiation pattern which are comparable to the results obtained using the Dolph’s Method [3] and Taylor’s Method [4]. We say comparable since we don’t obtain the exact equiripple sidelobes since multiplying the Fourier Series Method current coefficients with the window is equivalent to convolving the Fourier transform of the window function with that of the approximate radiation pattern.&lt;/p&gt;

&lt;h4 id=&quot;examples&quot;&gt;Examples&lt;/h4&gt;

&lt;p&gt;First, we consider the example of a sector pattern as defined in equation (1) using various fixed windows. We have chosen an array having 21 elements to compare the performances of various windows. Clearly, we see a reduced side lobe level compared to the rectangular window output. But, the catch is we have an increased main lobe width. Performance of the sector pattern synthesis using window method is summarized in Table 1.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Window&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Beamwidth&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Sidelobe Level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Rectangular&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;68&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-20.8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Hamming&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;85.6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-55.22&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Hanning&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;81&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-44.03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Blackman&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;116&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-72.63&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Table 1: Performance of various windows for Sector Pattern Synthesis&lt;/p&gt;

&lt;p&gt;To see how the use of window affects a different pattern, we next consider the example of a cosine pattern [5] with main lobe maximum at 0◦ and a half-power beamwidth of 30◦. We see the performance while using various fixed windows is similar to that obtained for a Sector Pattern in terms of the Beam Width. But, the side lobe level performance is better for the Cosine Pattern synthesis. This can explained due to the smoothness of the pattern we started with in the first place. Performance of the cosine pattern synthesis using window Method is summarized in Table 2.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Window&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Beamwidth&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Sidelobe Level&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Rectangular&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;68.1116&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-39.2285&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Hamming&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;85.6873&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-63.4069&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Hanning&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;81.0832&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-61.1224&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Blackman&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;116.4233&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-94.7030&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Table 2: Performance of various windows for Cosine Pattern Synthesis&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/plot4.png&quot; alt=&quot;Sector Pattern Synthesis using various fixed windows (Array size 21)&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;kaiser-window-design-of-a-sector-pattern&quot;&gt;Kaiser window design of a sector pattern&lt;/h4&gt;

&lt;p&gt;Suppose it is desired to have a sector pattern with beam width of 60 degrees with a side lobe level of -26 dB and with a transition width of 0.2 (in normalized frequency). The design procedure is as follows :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compute the required value of \( \beta \) using equation (12) with \( A = -26 dB \).&lt;/li&gt;
  &lt;li&gt;Compute the number of elements using equation (13) with \( \Delta \omega = 0.2 \).&lt;/li&gt;
  &lt;li&gt;Compute the currents using the Fourier series method.&lt;/li&gt;
  &lt;li&gt;Compute the window coefficients using the relation in (11).&lt;/li&gt;
  &lt;li&gt;Form the required currents by multiplying the currents obtained using the Fourier series method and the window function values.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the given design specifications, we obtained a value of \( \beta = 1.5064 \) and M = 41. The approximate radiation pattern obtained while using these values are shown in figure 5.
The Kaiser window design method provides a procedure to calculate the number of elements required in the array to achieve the specifications. To illustrate the improvement obtained by using Kaiser Window, we have plotted the radiation pattern of the array with size 41 while using a rectangular Window. Clearly, there is a 6 dB improvement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/plot5.png&quot; alt=&quot;Sector Pattern Synthesis using Chebyshev and Taylor Windows (Array size 21)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/plot6.png&quot; alt=&quot;Cosine Pattern Synthesis using various fixed windows (Array size 21)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/plot7.png&quot; alt=&quot;Sector Pattern Synthesis using Kaiser Window (Array Size 41)&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;In essence, all the methods that are available for design of uniformly spaced array can be viewed as a special case of the window design method with a proper choice of window. We have demonstrated the generality by showing examples of Fourier Series Method and Chebyshev Method. Also, we have outlined a procedure for array design using Kaiser Window where we could specify the constraints in the required approximate pattern and could come up with a window function and the length of the array required to realize such a pattern.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;[1] A. V. Oppenheim and R. W. Schafer, &lt;em&gt;Digital Signal Processing&lt;/em&gt;. NJ: Prentice- Hall: Englewood Cliffs, 1975.&lt;/li&gt;
  &lt;li&gt;[2] F. J. Harris, “On the use of windows for harmonic analysis with discrete fourier transform,” &lt;em&gt;IEEE&lt;/em&gt;, vol. 66, 1978.&lt;/li&gt;
  &lt;li&gt;[3] C.L.Dolph, “A current distribution for broadside arrays which optimizes the relationship between beamwith and sidelobe level,” &lt;em&gt;IRE&lt;/em&gt;, vol. 34, pp. 335– 348, 1946.&lt;/li&gt;
  &lt;li&gt;[4] T. T. Taylor, “Design of line-source antennas for narrow beamwidth and low sidelobes,” &lt;em&gt;IRE Transactions Antennas Propagation&lt;/em&gt;, vol. AP-3, pp. 16–28, 1955.&lt;/li&gt;
  &lt;li&gt;[5] D. H.Werner and A. J.Ferraro, “Cosine pattern synthesis for single and multiple main beam uniformly spaced linear arrays,” &lt;em&gt;IEEE&lt;/em&gt;, vol. 37, no. 11, pp. 1480–1484, 1989.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 03 Nov 2015 16:04:00 -0800</pubDate>
        <link>/2015/11/03/antenna-arrays-windows.html</link>
        <guid isPermaLink="true">/2015/11/03/antenna-arrays-windows.html</guid>
        
        <category>antenna</category>
        
        <category>arrays</category>
        
        <category>window</category>
        
        <category>hamming</category>
        
        <category>hanning</category>
        
        
      </item>
    
      <item>
        <title>Announcing shut up and cast</title>
        <description>&lt;p&gt;Thanks for the 4000 odd users of my previous chrome plugin &lt;a href=&quot;https://chrome.google.com/webstore/developer/edit/acjnpiepgaicjaeiphocgkekciflonfi&quot;&gt;Stream to XBMC&lt;/a&gt;, I have decided to extend the plugin’s capability to be used with the most popular casting device and the one which started it all, Chromecast. If you have a Chromecast and want to watch videos from sites for which there is no Chromecast app, you have come to the right place.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/developer/edit/eikiogacofhnibkedemjpfgammfhdcgf&quot;&gt;Shut up and cast&lt;/a&gt; is designed to do just that. It supports the following sites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gorillavid.in&lt;/li&gt;
  &lt;li&gt;einthusan.com&lt;/li&gt;
  &lt;li&gt;allmyvideos.net&lt;/li&gt;
  &lt;li&gt;vidto.me&lt;/li&gt;
  &lt;li&gt;played.to&lt;/li&gt;
  &lt;li&gt;megafiles.se&lt;/li&gt;
  &lt;li&gt;bestreams.net&lt;/li&gt;
  &lt;li&gt;vodmine.com&lt;/li&gt;
  &lt;li&gt;ishared.eu&lt;/li&gt;
  &lt;li&gt;thevideo.me&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What more? You can control the video playback from your browser window too. I promise, I will write up a phone app to control the playback next :).&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-the-plugin&quot;&gt;How to use the plugin?&lt;/h3&gt;

&lt;p&gt;Install the plugin first (Duh!). Go to any video link from the above list of sites. At the top right corner of you Chrome Address Bar, you should see a small icon when the plugin detects a video link which can be pushed to your Chromecast. Click the icon, it should open another tab from which you can choose your Chromecast (it can take a couple of seconds to detect the Chromecast). Select your chromecast, sit back and enjoy!!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/shutupandcast.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Oct 2015 07:35:00 -0700</pubDate>
        <link>/2015/10/18/announcing-shutupandcast.html</link>
        <guid isPermaLink="true">/2015/10/18/announcing-shutupandcast.html</guid>
        
        <category>chromecast</category>
        
        <category>stream</category>
        
        <category>shut</category>
        
        <category>up</category>
        
        <category>and</category>
        
        <category>cast</category>
        
        
      </item>
    
      <item>
        <title>How scripting languages spoil you</title>
        <description>&lt;p&gt;I love Python. But, I have to admit that it spoils you. I just spent 20 minutes trying to code up a simple program to do linear regression. This problem looks deceptively simple. In fact, it &lt;em&gt;is&lt;/em&gt; deceptively simple, &lt;em&gt;on paper&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here is the problem. You have a set of numbers X and another set of number Y. Find the linear fit that best describes the relation between Y and X. Here is an &lt;a href=&quot;http://www.stat.wmich.edu/s216/book/node126.html&quot;&gt;example&lt;/a&gt; that I took. Copying the numbers here for easy reference. &lt;code&gt;miles[]&lt;/code&gt; represent X and &lt;code&gt;price[]&lt;/code&gt; represent Y.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;miles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10565&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17764&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;mi&quot;&gt;57000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65940&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73676&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;93739&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;mi&quot;&gt;146088&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;153260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;mi&quot;&gt;8800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2750&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2550&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;960&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1025&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;raspberry-pi--64-bit-arithmetic&quot;&gt;Raspberry Pi &amp;amp; 64 bit arithmetic&lt;/h3&gt;

&lt;p&gt;Computation of Mean is so simple I won’t go over it. Let us go into the standard deviation computation. To compute standard deviation, we need take every element, find how far it is from the mean, square it to make it a positive number. Do this calculation for all the elements and average them up. Another minor thing to take into account is how to average them up. If you have N elements, you could either divide by N or (N-1) to compute the average. More information on the wikipedia article on &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_deviation#Estimation&quot;&gt;standard deviation&lt;/a&gt;. For our calculation, we will use N-1.&lt;/p&gt;

&lt;p&gt;That’s quite easy. Loop over each element using a for loop and compute the sum of the &lt;em&gt;deviations&lt;/em&gt; first. That’s where I hit my first roadblock. I was happily declaring all the variables as integers and to make things worse I was running my program on a Raspberry Pi (which is a 32-bit machine). I coded up everything and out comes the result which is totally unexpected. Started scratching my head. Let us call mean of &lt;code&gt;miles[]&lt;/code&gt; as &lt;code&gt;xbar&lt;/code&gt; which computes to 61194. What was happening was, &lt;code&gt;(miles[0] - xbar)*(miles[0] - xbar)&lt;/code&gt; was happily overflowing. Computing it manually (of course I used a Calculator), it is &lt;code&gt;(9300 - 61194) * (9300 - 61194) = 2692987236&lt;/code&gt; which was happily overflowing the signed integer number I had blissfully declared. So, I figured that out and got cocky again. Made the standard deviation variable a &lt;code&gt;long&lt;/code&gt; and ran the program again. My Pi FU-ed me again. Turns out, &lt;code&gt;long&lt;/code&gt; is not that long. In Raspberry Pi, I have to use &lt;code&gt;long long&lt;/code&gt; to get to 64 bits.&lt;/p&gt;

&lt;h3 id=&quot;typecasting&quot;&gt;Typecasting&lt;/h3&gt;

&lt;p&gt;Next lesson I learned today was about typecasting. Look at this very simple C program. Without the typecast, you end up overflowing the data. Why? &lt;code&gt;a&lt;/code&gt; is defined as a signed number. When we do the multiplication without the cast, we first do a signed mutliplication which goes over 32 bits. And then we try to fit this into the variable b which is also unsigned. C sign extends the data and you end up with a negative number. On the other hand, if you do the cast, you first create enough room to store a 64 bit number and then do the multiplication. This fixes the overflow. Another way to fix this problem would be, if you know your number &lt;code&gt;a&lt;/code&gt; is going to be unsigned, you could define it as unsigned. But still it is only a matter of time before we end up with a value of 65536 or more as &lt;code&gt;a&lt;/code&gt; to cause the overflow. So, always be cautious and know your limits.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61194&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
     &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// b = -550261660, Wrong!&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b = %lld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
     &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// b = 3744705636, Correct!&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b = %lld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;bottomline&quot;&gt;Bottomline&lt;/h3&gt;

&lt;p&gt;Knowing C makes you a strong programmer. But it starts with getting kicked right on your nuts! You can find my final program right here on my &lt;a href=&quot;https://github.com/MahadevanSrinivasan/cprograms/blob/master/linearfit.c&quot;&gt;Github Repository&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Oct 2015 14:51:00 -0700</pubDate>
        <link>/2015/10/14/how-scripting-languages-spoil-you.html</link>
        <guid isPermaLink="true">/2015/10/14/how-scripting-languages-spoil-you.html</guid>
        
        <category>raspberry</category>
        
        <category>pi</category>
        
        <category>64bit</category>
        
        <category>overflow</category>
        
        <category>typecast</category>
        
        <category>C</category>
        
        
      </item>
    
      <item>
        <title>HOWTO: Using Openssl C library</title>
        <description>&lt;p&gt;For one of the &lt;a href=&quot;http://cryptopals.com/sets/1/challenges/7/&quot;&gt;Matasano crypto challenges&lt;/a&gt;, I had to decrypt the text 
which was encrypted using AES in ECB mode. Everything about AES is actually documented by the 
&lt;a href=&quot;http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf&quot;&gt;National Institute of Standards and Technology&lt;/a&gt;. 
You can get all the algorithms behind AES encryption. It is probably not a good idea to implement it from scratch.
Openssl has a well tested and widely used library which works.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://www.openssl.org/docs/manmaster/crypto/EVP_EncryptInit.html&quot;&gt;Openssl library page&lt;/a&gt; gives a complete example 
of how to use them. There are a few preparatory steps before you can use the instructions though. These 
instructions are for Ubuntu like Linux distributions. These worked well on my Raspberry Pi too.&lt;/p&gt;

&lt;h3 id=&quot;installing-openssl-library&quot;&gt;Installing Openssl library&lt;/h3&gt;

&lt;p&gt;Following command installs all the C libraries needed to use Openssl with your C code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install libssl-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For example, you will want to include the following header files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;openssl/evp.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;openssl/ssl.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;openssl/rsa.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;openssl/x509.h&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;compiling-your-c-program-with-the-openssl-library&quot;&gt;Compiling your C program with the Openssl library&lt;/h3&gt;

&lt;p&gt;Next, you can follow the instructions from the 
&lt;a href=&quot;https://www.openssl.org/docs/manmaster/crypto/EVP_EncryptInit.html&quot;&gt;Openssl crypto library page&lt;/a&gt; to create 
your C program. I have an example program in my &lt;a href=&quot;https://github.com/MahadevanSrinivasan/cryptopals/blob/master/s1c7.c&quot;&gt;Crytopals&lt;/a&gt;
Github repository. While linking the program you need to provide the ssl and crypto library names. 
Following command should do it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gcc yourprogram.c -lssl -lcrypto&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;a-few-pointers-on-the-docrypt-function&quot;&gt;A few pointers on the &lt;code&gt;do_crypt&lt;/code&gt; function&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;If you are going to use the &lt;code&gt;do_crypt&lt;/code&gt; function for decrypting a text encrypted using electronic code book (ECB) mode, you should remove the following assert line since there is no Initialization Vector for ECB.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;OPENSSL_assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVP_CIPHER_CTX_iv_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The example code operates on the raw data. So, if you are trying to decrypt the data which is base64 encoded, your first step should be to convert it into raw data.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 10 Oct 2015 16:07:00 -0700</pubDate>
        <link>/2015/10/10/use-openssl-c-library.html</link>
        <guid isPermaLink="true">/2015/10/10/use-openssl-c-library.html</guid>
        
        <category>Openssl</category>
        
        <category>C</category>
        
        <category>HOWTO</category>
        
        
      </item>
    
      <item>
        <title>Ultimate guide to pointers</title>
        <description>&lt;p&gt;Pointers in C are one of the most confusing concepts. I am going to document
how pointers work in the order of increasing complexity.&lt;/p&gt;

&lt;h3 id=&quot;simple-example-of-an-integer-pointer&quot;&gt;Simple example of an integer pointer&lt;/h3&gt;

&lt;p&gt;A pointer variable is specific to a specific type. For example, if you want
to point to an integer variable, you define it as &lt;code&gt;int *p&lt;/code&gt;. The asterisk says
that p can point to an integer. Right now, it is pointing to nothing. In C, nothing
is &lt;code&gt;NULL&lt;/code&gt;. To make it point to an integer &lt;code&gt;x&lt;/code&gt;, you do it like on line 11. Below 
example also shows how to pass the variable x as a pointer to a different function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printvalueofx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;printvalueof: Addr: %p,  Value = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;main: Addr: %p, Value = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;cm&quot;&gt;/* Pass the pointer to the function */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printvalueofx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 07 Oct 2015 12:54:00 -0700</pubDate>
        <link>/2015/10/07/ultimate-guide-to-pointers.html</link>
        <guid isPermaLink="true">/2015/10/07/ultimate-guide-to-pointers.html</guid>
        
        <category>pointers</category>
        
        <category>c</category>
        
        
      </item>
    
      <item>
        <title>Hex to base64 conversion</title>
        <description>&lt;p&gt;I came across another set of online coding challenges called &lt;a href=&quot;http://cryptopals.com/&quot;&gt;The Matasano Crypto Challenges&lt;/a&gt;. From a quick google search, it seems like lots of people have tried and recommended it. I got intrigued and started coding right away. To keep the blog rolling, I will share my experience with these coding challenges.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cryptopals.com/sets/1/&quot;&gt;Challenge Set 1&lt;/a&gt; is apparently for warming up. Today, I worked on the first problem in set 1 and solved it (quite efficiently, I hope.) This problem involves converting a hex string to base64. Looked quite straightforward but there were a few &lt;em&gt;gotchas&lt;/em&gt; for me.&lt;/p&gt;

&lt;h4 id=&quot;understanding-the-input&quot;&gt;Understanding the Input&lt;/h4&gt;

&lt;p&gt;First step in solving any coding problem would be to understand how the input(s) and the output(s) are represented. In our case, input is a string of hex characters. Borrowing from the wikipedia page for &lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot;&gt;Base 64&lt;/a&gt;, if we want to represent the word “Man” in our input format, it will be represented as “4D616E”. From now on, try to think of everything in this format. Each hex &lt;em&gt;digit&lt;/em&gt; needs 4 bits for representation. But, when stored as a character array, each &lt;em&gt;digit&lt;/em&gt; needs 8 bits.&lt;/p&gt;

&lt;h4 id=&quot;understanding-the-output&quot;&gt;Understanding the Output&lt;/h4&gt;
&lt;p&gt;A base 64 &lt;em&gt;digit&lt;/em&gt; needs a minimum of 6 bits. Another way of looking at this is, if we represent this as an integer, we won’t exceed the value of 63. So, the input “4D616E” can be represented as 4 base-64 digits. Why? Look at the value of the input in binary:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;8-bit grouping: &lt;span class=&quot;m&quot;&gt;01001101&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;01100001&lt;/span&gt; 01101110
6-bit grouping: &lt;span class=&quot;m&quot;&gt;010011&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;010110&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;000101&lt;/span&gt; 101110&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;doing-the-conversion&quot;&gt;Doing the conversion&lt;/h4&gt;
&lt;p&gt;First step is to convert the set of hex values into an intermediate representation. Why not good ol’ decimal system? Following function takes in a hex character and spits out its decimal value.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hexchartoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* Convert incoming character to lower case first */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tolower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Not sure what to do with this input: %c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we need to somehow represent our 6 hex input into an equivalent decimal representation. Keep in mind, we don’t have a 6 digit hexadecimal number. We have three 2 digit hexadecimal numbers. This distinction is important and is the reason why we combine them using a logical or and not addition. So, we want 0x4D converted to 77, 0x61 converted to 91 and 0x6E converted to 110. And finally all of them logical or-ed together.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexchartoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexchartoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexchartoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexchartoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexchartoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexchartoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next step would be to look at individual 6-bit groups and convert it to base 64. &lt;a href=&quot;https://en.wikipedia.org/wiki/Base64&quot;&gt;Base 64&lt;/a&gt; wiki page has the information about what letters to use. In C, this character array will do the trick:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we loop through the 6 bit values and store them in the output character array:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;running-the-program&quot;&gt;Running the program&lt;/h4&gt;
&lt;p&gt;Another thing I learned today is how to send the data from a file as command line arguments to your program. For example, if you have program.exe and you want to send the text from input.txt as command line parameters, you could do the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;program.exe &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &amp;lt; input.txt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are other ways of doing this. But, this was the simplest way.&lt;/p&gt;

&lt;h4 id=&quot;complete-solution&quot;&gt;Complete solution&lt;/h4&gt;
&lt;p&gt;I have the complete solution uploaded to my github repository &lt;a href=&quot;https://github.com/MahadevanSrinivasan/cryptopals&quot;&gt;here&lt;/a&gt;. Cheers!!&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Sep 2015 09:54:00 -0700</pubDate>
        <link>/2015/09/30/hex-to-base64.html</link>
        <guid isPermaLink="true">/2015/09/30/hex-to-base64.html</guid>
        
        <category>crypto</category>
        
        <category>challenge</category>
        
        <category>matasano</category>
        
        
      </item>
    
      <item>
        <title>Sudokids</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://mahadevansrinivasan.github.io/sudokids/&quot;&gt;Sudokids&lt;/a&gt; as the name so obviously states is Sudoku for kids. Motivation behind Sudokids is to teach kids set theory with the help of Sudoku.&lt;/p&gt;

&lt;p&gt;Let me know what you think!!&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 16:43:00 -0700</pubDate>
        <link>/2015/09/29/sudokids.html</link>
        <guid isPermaLink="true">/2015/09/29/sudokids.html</guid>
        
        <category>sudoku</category>
        
        <category>for</category>
        
        <category>kids</category>
        
        <category>sudokids</category>
        
        
      </item>
    
      <item>
        <title>Stream to XBMC FAQ</title>
        <description>&lt;p&gt;As a follow up to my previous post about my plugin Stream to XBMC, here are some
frequently asked questions about how to setup the plugin. Just two for now, more to follow.&lt;/p&gt;

&lt;h3 id=&quot;how-do-i-setup-the-plugin-to-work-with-my-xbmc-setup&quot;&gt;How do I setup the plugin to work with my XBMC setup?&lt;/h3&gt;

&lt;p&gt;After installing the plugin, it should automatically bring up the options page to
configure the plugin. Here you setup the IP address and an optional port number
to send videos to your XBMC setup. To access the options page after the first install,
go to: &lt;a href=&quot;chrome://extensions&quot;&gt;chrome://extensions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Customize and control Google Chrome  More Tools -&amp;gt; Extensions -&amp;gt; Options (for Stream to XBMC).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/strmtoxbmc_options.png&quot; alt=&quot;Stream to XBMC options page&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;i-pushed-a-video-to-my-xbmc-setup-how-do-i-playpause-the-video&quot;&gt;I pushed a video to my XBMC setup, how do I play/pause the video?&lt;/h3&gt;

&lt;p&gt;I configure my remote control to work with my XBMC setup. You could also use one of the iOS or Android remotes to control XBMC. This &lt;a href=&quot;http://www.raspbmc.com/wiki/user/configuring-remotes/&quot;&gt;link&lt;/a&gt; gives more information.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 16:36:00 -0700</pubDate>
        <link>/2015/09/29/stream-to-xbmc-faq.html</link>
        <guid isPermaLink="true">/2015/09/29/stream-to-xbmc-faq.html</guid>
        
        <category>raspberrypi</category>
        
        <category>stream</category>
        
        <category>xbmc</category>
        
        <category>faq</category>
        
        
      </item>
    
      <item>
        <title>Stream to XBMC</title>
        <description>&lt;p&gt;This is a chrome-plugin to push videos to an XBMC setup. It can be used it with Raspberry Pi or any other XBMC setup to watch videos from CBS, Youtube and so many other sites on your TV. Big bang theory anyone?&lt;/p&gt;

&lt;p&gt;Are you one of those people who watch the latest TV shows from random video streaming sites on your laptop? Do you want to watch it on your big screen TV instead? You have come to the right place.&lt;/p&gt;

&lt;p&gt;Stream to XBMC is a chrome plugin which can push videos from your chrome browser to your XBMC setup. It currently supports pushing videos from the following sites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;einthusan.com&lt;/li&gt;
  &lt;li&gt;gorillavid.in&lt;/li&gt;
  &lt;li&gt;youtube.com&lt;/li&gt;
  &lt;li&gt;cbs.com&lt;/li&gt;
  &lt;li&gt;allmyvideos.net&lt;/li&gt;
  &lt;li&gt;vidto.me&lt;/li&gt;
  &lt;li&gt;vidzi.tv&lt;/li&gt;
  &lt;li&gt;played.to&lt;/li&gt;
  &lt;li&gt;megafiles.se&lt;/li&gt;
  &lt;li&gt;bestreams.net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you haven’t installed it yet, go ahead and do it from the &lt;a href=&quot;https://chrome.google.com/webstore/detail/stream-to-xbmc/acjnpiepgaicjaeiphocgkekciflonfi&quot;&gt;Chrome Webstore&lt;/a&gt;. Don’t forget to leave your comments below!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S: Looking for a cheap XBMC setup to connect to your TV. Try &lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;RaspberryPi&lt;/a&gt;.&lt;/em&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Icon made by &lt;a href=&quot;http://www.google.com/&quot;&gt;Google&lt;/a&gt; from &lt;a href=&quot;http://www.flaticon.com/&quot;&gt;www.flaticon.com&lt;/a&gt; is licensed under &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;CC BY 3.0&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 16:31:00 -0700</pubDate>
        <link>/2015/09/29/stream-to-xbmc.html</link>
        <guid isPermaLink="true">/2015/09/29/stream-to-xbmc.html</guid>
        
        <category>raspberrypi</category>
        
        <category>stream</category>
        
        <category>xbmc</category>
        
        
      </item>
    
      <item>
        <title>Upstream linux kernel on a Raspberry Pi</title>
        <description>&lt;p&gt;Recently, I signed up for the &lt;a href=&quot;http://eudyptula-challenge.org/&quot;&gt;Eudyptula Challenge&lt;/a&gt;. If you have not heard of it, it is a series of programming exercises designed to train you with Linux Kernel Development process.
One of the tasks is to install the latest linux kernel on your machine. You have an option of doing it in a Virtual box setting. Hey, but where is the fun in doing that? I had a Raspberry Pi handy and found a couple of good Wiki pages on how to compile your own kernel for Raspberry Pi (&lt;a href=&quot;http://elinux.org/RPi_Upstream_Kernel_Compilation&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://elinux.org/RPi_Kernel_Compilation&quot;&gt;here&lt;/a&gt;). These two pages have the all the info needed but it is kind of scattered.
Fastest way to compile the kernel is to do in in Ubuntu (You could technically do it on a MAC, but it is slightly more involved). I tried on my MAC first but ended up installing Ubuntu through Virtualbox to do the compilation. Here are the steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install Virtualbox on your MAC (skip if you already have a Ubuntu setup)
    &lt;ul&gt;
      &lt;li&gt;Make sure you allocate atleast 16 GB for your Ubuntu partition.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a new directory in your home directory and call it whatever you want (I called it linux).&lt;/li&gt;
  &lt;li&gt;Install git using the following command:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Change your current directory to the new  one you just created.&lt;/li&gt;
  &lt;li&gt;Run this command to get the compiler:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install gcc-arm-linux-gnueabi make ncurses-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Run this command to get the u-boot (default raspberry pi bootloader won’t work for the upstream kernel)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/swarren/u-boot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Get the kernel source from Linus Torvalds&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git --depth&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Create the following exports:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KERNEL_SRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/your/linux
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CCPREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/your/compiler/binary/prefix-of-binary-
mkdir /path/to/your/modules
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULES_TEMP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/your/modules  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Time to create a config file which tells what to compile and what not to.  (&lt;code&gt;ARCH=arm &amp;amp; CROSS_COMPILE=${CCPREFIX}&lt;/code&gt; very important).&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;linux
&lt;span class=&quot;nv&quot;&gt;$ ARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm &lt;span class=&quot;nv&quot;&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CCPREFIX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; make bcm2835_defconfig
&lt;span class=&quot;nv&quot;&gt;$ ARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm &lt;span class=&quot;nv&quot;&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CCPREFIX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; make menuconfig&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Second command creates a .config file in your current directory and the menuconfig command opens up a new window for selecting different modules to compile. Just enabled the option which says “Modules” and save the configuration.&lt;/li&gt;
  &lt;li&gt;Finally to do the actual the compilation and install all the needed modules (in a temporary location):&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ ARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm &lt;span class=&quot;nv&quot;&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CCPREFIX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; chrt -i &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; make -j 2
&lt;span class=&quot;nv&quot;&gt;$ ARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm &lt;span class=&quot;nv&quot;&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CCPREFIX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;INSTALL_MOD_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULES_TEMP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; make modules_install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Once kernel compiles successfully (which it should if you have followed the steps), time to compile the bootloader. Run the following commands:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../u-boot
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout -b rpi_dev origin/rpi_dev
&lt;span class=&quot;nv&quot;&gt;$ ARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm &lt;span class=&quot;nv&quot;&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CCPREFIX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; chrt -i &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; make rpi_config
&lt;span class=&quot;nv&quot;&gt;$ ARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm &lt;span class=&quot;nv&quot;&gt;CROSS_COMPILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CCPREFIX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; chrt -i &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; make -j 8&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Once this is done, go inside the tools directory under u-boot directory:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tools&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Create a file by name boot.scr with the following contents (for Raspberry Pi Model B):&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mmc dev 0
setenv fdtfile bcm2835-rpi-b.dtb
setenv bootargs earlyprintk &lt;span class=&quot;nv&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tty0 &lt;span class=&quot;nv&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ttyAMA0 &lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/mmcblk0p2 rootwait
fatload mmc 0:1 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_addr_r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; zImage
fatload mmc 0:1 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fdt_addr_r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fdtfile&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
bootz &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_addr_r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; - &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fdt_addr_r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Or for Model B+:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mmc dev 0
setenv fdtfile bcm2835-rpi-b-plus.dtb
setenv bootargs earlyprintk &lt;span class=&quot;nv&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tty0 &lt;span class=&quot;nv&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ttyAMA0 &lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/mmcblk0p2 rootwait
fatload mmc 0:1 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_addr_r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; zImage
fatload mmc 0:1 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fdt_addr_r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fdtfile&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
bootz &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_addr_r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; - &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fdt_addr_r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;And then run the following command (this should generate a boot.scr.img)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./mkimage -A arm -O linux -T script -C none -n boot.scr -d boot.scr boot.scr.uimg&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now, go to your /boot directory on your Raspberry Pi and create a new directory called backup and move everything inside the backup directory. You might have to sudo the last command.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/boot
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nv&quot;&gt;$SD&lt;/span&gt;/backup
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv &lt;span class=&quot;nv&quot;&gt;$SD&lt;/span&gt;/* &lt;span class=&quot;nv&quot;&gt;$SD&lt;/span&gt;/backup&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Fetch &lt;code&gt;start.elf&lt;/code&gt; and &lt;code&gt;bootcode.bin&lt;/code&gt; from https://github.com/raspberrypi/firmware/tree/master/boot and save it to your &lt;code&gt;$SD&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Finally, move all the required files from your Ubuntu machine to your Raspberry Pi using scp. You might have to move it to a temporary location first (in this case I am moving it to the home directory).&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scp u-boot/u-boot.bin pi@192.168.1.101:~/kernel.img
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scp linux/arch/arm/boot/zImage linux/arch/arm/boot/dts/bcm2835-rpi-b.dtb u-boot/tools/boot.scr.uimg pi@192.168.1.101:~/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Go to your Raspberry Pi and use sudo mv to move the files from your home directory to the /boot directory as follows:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mv ~/kernel.img ~/zImage ~/bcm2835-rpi-b.dtb ~/boot.scr.uimg /boot/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now your boot directory should have the following files:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;u-boot.bin
kernel.img
zImage
bcm2835-rpi-b.dtb
boot.scr.uimg
start.elf
bootcode.bin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;For Model B+, you will have &lt;code&gt;bcm2835-rpi-b-plus.dtb&lt;/code&gt; instead of &lt;code&gt;bcm2835-rpi-b.dtb&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Copy your source code from the Ubuntu machine to your Raspberry Pi:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scp -r /path/to/your/linux/ pi@192.168.1.101:/home/pi/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Change the permissions just in case&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/pi
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo chown -R pi:pi linux/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Copy the modules next (Move to a temporary folder if you can’t write to /lib/modules directly and then sudo mv it).&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo scp -r /path/to/your/modules/&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;uname -r&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/ pi@192.168.1.101:/lib/modules/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Correct the symbolic links next:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /lib/modules/&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;uname -r&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo rm build &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s /home/pi/linux build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s /home/pi/linux &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Finally, we need to fix one more problem: During the cross-compilation build, a couple scripts were compiled for the host. We also need them for the Raspberry Pi. Still on the Pi, this can be checked with e.g.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file /home/pi/linux/scripts/recordmcount &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;returns something with x86-64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/pi/linux/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make scripts
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file /home/pi/linux/scripts/recordmcount &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;now returns something with 32-bit and ARM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Reboot the device and see your new kernel load in all its glory.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 13:55:07 -0700</pubDate>
        <link>/2015/09/29/upstream-kernel-raspberry-pi.html</link>
        <guid isPermaLink="true">/2015/09/29/upstream-kernel-raspberry-pi.html</guid>
        
        <category>linux</category>
        
        <category>raspberry</category>
        
        <category>pi</category>
        
        <category>eudyptula</category>
        
        
      </item>
    
  </channel>
</rss>
